<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="shader_fill_vs">
        attribute vec2 aPosition;
        attribute vec3 aColor;
        varying vec3 vColor;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vColor = aColor;
        }
    </string>
    <string name="shader_fill_fs">
        precision mediump float;
        varying vec3 vColor;
        void main() {
            gl_FragColor = vec4(vColor, 1.0);
        }
    </string>
    <string name="shader_copy_vs">
        attribute vec2 aPosition;
        varying vec2 vTextureCoord;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vTextureCoord = (gl_Position.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_copy_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        uniform float uBrightness;
        varying vec2 vTextureCoord;
        void main() {
            gl_FragColor = texture2D(sTexture, vTextureCoord);
            float brightness = length(vTextureCoord - 0.5) * 1.3;
            gl_FragColor.rgb *= uBrightness - brightness * brightness;
        }
    </string>
    <string name="shader_point_vs">
        uniform mat4 uModelViewProjM;
        uniform vec3 uPointPosition;
        uniform float uPointSize;
        uniform vec2 uAspectRatio;
        attribute vec2 aPosition;
        varying vec2 vPosition;
        void main() {
            gl_Position = uModelViewProjM * vec4(uPointPosition, 1.0);
            gl_Position /= gl_Position.w;
            gl_Position.xy += aPosition * uAspectRatio * uPointSize;
            vPosition = aPosition;
        }
    </string>
    <string name="shader_cloud_fs">
        precision mediump float;
        uniform vec3 uColor;
        varying vec2 vPosition;
        void main() {
            if (length(vPosition) >= 1.0) {
                discard;
            } else {
                vec2 pos = vPosition + 1.0;
                gl_FragColor.rgb = uColor * (1.3 - (pos.x + 2.0 - pos.y) * 0.2);
                gl_FragColor.a = 1.0;
            }
        }
    </string>
    <string name="shader_plane_vs">
        uniform mat4 uModelViewProjM;
        attribute vec3 aPosition;
        void main() {
            gl_Position = uModelViewProjM * vec4(aPosition, 1.0);
        }
    </string>
    <string name="shader_plane_fs">
        precision mediump float;
        uniform vec3 uColor;
        uniform float uAlpha;
        void main() {
            gl_FragColor = vec4(uColor, uAlpha);
        }
    </string>
    <string name="shader_wave_texture_fs">
        precision mediump float;
        uniform float uBrightness;
        varying vec2 vPosition;
        void main() {
            if (length(vPosition) >= 1.0) {
                discard;
            } else {
                gl_FragColor.r = uBrightness;
            }
        }
    </string>
    <string name="shader_wave_vs">
        uniform vec2 uPositionOffset;
        uniform vec2 uTextureSize;
        attribute vec2 aPosition;
        varying vec2 vTexturePos;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vTexturePos = abs((aPosition - 1.0) * uTextureSize * 0.5);
            gl_Position.y += uPositionOffset.y;
            vTexturePos.x += uPositionOffset.x;
        }
    </string>
    <string name="shader_wave_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        uniform vec3 uColor;
        varying vec2 vTexturePos;
        void main() {
            float brightness = texture2D(sTexture, vTexturePos).r;
            if (texture2D(sTexture, vTexturePos).r > 0.0) {
                gl_FragColor = vec4(uColor * brightness, 1.0);
            } else {
                discard;
            }
        }
    </string>
</resources>