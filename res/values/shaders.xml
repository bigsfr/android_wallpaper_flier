<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="shader_fill_vs">
        attribute vec4 aPosition;
        attribute vec4 aColor;
        varying vec4 vColor;
        void main() {
            gl_Position = aPosition;
            vColor = aColor;
        }
    </string>
    <string name="shader_fill_fs">
        precision mediump float;
        varying vec4 vColor;
        void main() {
            gl_FragColor = vColor;
        }
    </string>
    <string name="shader_copy_vs">
        attribute vec4 aPosition;
        varying vec2 vTextureCoord;
        void main() {
            gl_Position = aPosition;
            vTextureCoord = (gl_Position.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_copy_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = texture2D(sTexture, vTextureCoord);
            float brightness = clamp(1.2 - length(vTextureCoord - 0.5) * 1.5, 0.0, 1.0);
            gl_FragColor.rgb *= sqrt(brightness);
        }
    </string>
    <string name="shader_cloud_vs">
        uniform mat4 uProjM;
        uniform float uXOffset;
        uniform float uPointSizeOffset;
        attribute vec3 aPosition;
        attribute float aPointSize;
        
        void main() {
            gl_Position = uProjM * vec4(aPosition.x - uXOffset, aPosition.yz, 1.0);
            gl_PointSize = aPointSize + uPointSizeOffset;
        }
    </string>
    <string name="shader_cloud_fs">
        precision mediump float;
        uniform float uColor;
        
        void main() {
            float dist = length(gl_PointCoord - 0.5);            
            if (dist > 0.5) {
                discard;
            } else {
                gl_FragColor.rgb = vec3(uColor * (1.3 - (gl_PointCoord.x + gl_PointCoord.y) * 0.4));
                gl_FragColor.a = 1.0;
            }
        }
    </string>
    <string name="shader_plane_vs">
        uniform mat4 uModelViewProjM;
        attribute vec3 aPosition;
        void main() {
            gl_Position = uModelViewProjM * vec4(aPosition, 1.0);
        }
    </string>
    <string name="shader_plane_fs">
        precision mediump float;
        uniform vec4 uColor;
        void main() {
            gl_FragColor = uColor;
        }
    </string>
    <string name="shader_wave_point_vs">
        uniform float uPointSize;
        attribute vec2 aPosition;
        
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            gl_PointSize = uPointSize;
        }
    </string>
    <string name="shader_wave_point_fs">
        precision mediump float;
        uniform float uBrightness;
        
        void main() {
            float dist = length(gl_PointCoord - 0.5);            
            if (dist &lt;= 0.5) {
                gl_FragColor.r = uBrightness;
            } else {
                discard;
            }
        }
    </string>
    <string name="shader_wave_vs">
        uniform vec2 uPositionOffset;
        uniform vec2 uTextureSize;
        attribute vec2 aPosition;
        varying vec2 vTexturePos;
        
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vTexturePos = abs((aPosition - 1.0) * uTextureSize * 0.5);
            gl_Position.y += uPositionOffset.y;
            vTexturePos.x += uPositionOffset.x;
        }
    </string>
    <string name="shader_wave_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        uniform vec4 uColor;
        varying vec2 vTexturePos;
        
        void main() {
            float brightness = texture2D(sTexture, vTexturePos).r;
            if (texture2D(sTexture, vTexturePos).r != 0.0) {
                gl_FragColor = uColor * brightness;
            } else {
                discard;
            }
        }
    </string>
</resources>